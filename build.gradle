buildscript {
     ext {
         springBootVersion = '1.5.3.RELEASE'
     }
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "gradle.plugin.com.stefletcher.gradle-javabase-plugin:javabaseplugin:1.0.13"
        classpath "gradle.plugin.com.iadams.gradle:gradle-openshift-plugin:0.1-RC1"
    }
}

apply plugin: "com.stefletcher.gradle-javabase-plugin"
apply plugin: 'org.springframework.boot'
apply plugin: 'idea'

jar {
	baseName = 'spring-spock-tests'
	version = "1.0.$System.env.TRAVIS_BUILD_NUMBER"
}
sourceCompatibility = 1.8
targetCompatibility = 1.8


version = "1.0.$System.env.TRAVIS_BUILD_NUMBER"

group = "com.stefletcher.spring"

repositories {
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-mongodb')
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile 'org.codehaus.groovy:groovy-all:2.4.7'
    compile 'io.fabric8:openshift-client:2.2.13'
    compile 'org.hibernate:hibernate-validator:5.4.1.Final'
	
	testCompile('org.springframework.boot:spring-boot-starter-test') 
    testCompile('org.spockframework:spock-core:1.1-groovy-2.4') {
        exclude module: 'groovy-all'
    }
    testCompile('org.spockframework:spock-spring:1.1-groovy-2.4') {
        exclude module: 'groovy-all'
    }
    testCompile('com.github.fakemongo:fongo:2.1.0')
}

test {
    testLogging {
        exceptionFormat "full"
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}



import io.fabric8.openshift.api.model.DeploymentConfigBuilder
import io.fabric8.openshift.api.model.DeploymentTriggerPolicyBuilder

task createDeployment(type: com.iadams.gradle.openshift.tasks.OpenShiftCreateDeploymentTask) {
    namespace = 'myproject'
    deployment = new DeploymentConfigBuilder()
            .withNewMetadata()
            .withName('test-app')
            .endMetadata()
            .withNewSpec()
            .withReplicas(1)
            .withTriggers(new DeploymentTriggerPolicyBuilder().withType('ConfigChange').build())
            .addToSelector('app','test-app')
            .withNewTemplate()
            .withNewMetadata()
            .addToLabels('app', 'test-app')
            .endMetadata()
            .withNewSpec()
            .addNewContainer()
            .withName('test-app')
            .withImage('${registryUrl}/myproject/test-app:0.1')
            .endContainer()
            .endSpec()
            .endTemplate()
            .endSpec()
            .withNewStatus()
            .withLatestVersion(0L)
            .endStatus()
            .build()
}